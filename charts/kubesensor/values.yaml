# Default values for .
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  cluster_name: default-cluster
  podAntiAffinityLabelSelector: []
  podAntiAffinityTermLabelSelector: []
  podAffinityLabelSelector: []
  podAffinityTermLabelSelector: []
  nodeAffinityLabelSelector: []
  nodeAffinityTermLabelSelector: []
  kubeAggregatorIp: kubesense-aggregator
  vmAgentIp: kubesense-victoria-metrics-agent
  vmAgentHttpPort: 30060  
  ignoreLogsNamespace: []
  image:
    registry: 365639915496.dkr.ecr.us-east-1.amazonaws.com
    pullPolicy: IfNotPresent
    pullSecrets: registry-credentials
  kubecolIps:
  - kubesense-kubecol
  externalVictoriaMetrics:
    enabled: false
  nodePort:
    kubeAggregatorLogPort: 30052
    kubeAggregatorGrpcPort: 30051
  ebpfsensor: 
    enabled: true  
  logsensor:
    enabled: true

deployComponent: 
- "daemonset"
# - "watcher"
# 
tke_sidecar: false

image:
  repository: "{{ $.Values.global.image.registry }}/kubesensor"
  pullPolicy:  "{{ $.Values.global.image.pullPolicy }}"
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.0.1"

logsensor:
  repository:  "{{ $.Values.global.image.registry }}/vector"
  tag: 0.38.X-debian
  pullPolicy:  "{{ $.Values.global.image.pullPolicy }}"
  priorityClassName: 
  securityContext: {}
    # privileged: true
  rbac:
    create: true
  serviceAccount:
    automountToken: true
  psp:
    create: false
  resources:
    limits:
      cpu: 300m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 256Mi

priorityClassName:
imagePullSecrets: []
nameOverride: ""
agentFullnameOverride: ""

podAnnotations: {}
## Pod Labels
podLabels: {}
podSecurityContext: {}
  # fsGroup: 2000
hostNetwork: "false"

## Mount the netns hostPath directory read-only 
netns:
  mount: false
  
securityContext:
  privileged: true
  capabilities:
    add:
    - SYS_ADMIN ## Permission required for collecting K8s information and eBPF data
    - SYS_RESOURCE ## Permissions required to collect eBPF data
    - SYS_PTRACE ## Permission required for collecting K8s information
    - NET_ADMIN ## Indicates the permission for collecting AF_PACKET traffic
    - NET_RAW ## Indicates the permission for collecting AF_PACKET traffic
    - IPC_LOCK ## optional MAP_LOCKED MAP_NORESERVE: Indicates the permission for collecting AF_PACKET traffic, It can significantly degrade performance when not available
    - SYSLOG
    #- BPF      ## Optionally, eBPF does not require SYS_ADMIN in kernel Linux 5.8+ and uses a combination of BPF and PERFMON instead
    #- PERFMON  ## Optionally, eBPF does not require SYS_ADMIN in kernel Linux 5.8+ and uses a combination of BPF and PERFMON instead
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000


timezone: "Etc/GMT"

## File read and write permissions required for collecting eBPF data (Optional. If you do not have the permission and the content does not meet expectations, the performance will be significantly reduced. You can set the content in advance.)
## sysctl -w net.core.bpf_jit_enable=1
sysctlInitContainer:
  enabled: true

extraVolumeMounts: []
service:
  ## Configuration for Clickhouse service
  ##
  annotations: {}
  labels: {}
  clusterIP: ""

  ## Port for Clickhouse Service to listen on
  ##

  ports:
  - name: receive
    port: 80
    targetPort: receive
    nodePort: 
    protocol: TCP

  ## Additional ports to open for server service
  additionalPorts: []

  externalIPs: []
  loadBalancerIP: ""
  loadBalancerSourceRanges: []

  ## Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints
  externalTrafficPolicy: Cluster

  ## Service type
  ##
  type: ClusterIP

kubesenseK8sClusterID:
sensorGroupID:
kubecolPort: 32033
## This command takes effect when agent-group-config external_agent_http_proxy_enabled=1 is configured using kubesensor-ctl
## Set the port to the agent-group-config port
externalAgentHttpProxyPort: 22143

kubesensorConfig: 
  kubesensor.yaml: |
    {{- nindent 4 "kubecol_ips:" -}}
    {{- tpl (toYaml $.Values.global.kubecolIps ) .| nindent 4 -}}
    {{- if .Values.sensorGroupID }}{{ nindent 4 "sensor_group_id:" }} {{ .Values.sensorGroupID }}{{ end -}}
    {{- if .Values.kubesenseK8sClusterID }}{{ nindent 4 "kubernetes_cluster_id:" }} {{ .Values.kubesenseK8sClusterID }}{{ end -}}
    {{- if .Values.kubecolPort }}{{ nindent 4 "kubecol_port:" }} {{ .Values.kubecolPort }}{{ end -}}
    {{- if .Values.global.cluster_name }}{{ nindent 4 "kubernetes_cluster_name:" }} {{ .Values.global.cluster_name }}{{ end -}}

resources:
  limits:
    cpu: 1000m
    memory: 768Mi
  requests:
    cpu: 100m
    memory: 128Mi

nodeSelector: {}

tolerations: []
# - key: "key1"
#   operator: "Equal"
#   value: "value1"
#   effect: "NoSchedule"

podAntiAffinityLabelSelector: []
podAntiAffinityTermLabelSelector: []
podAffinityLabelSelector: []
podAffinityTermLabelSelector: []
nodeAffinityLabelSelector: []
nodeAffinityTermLabelSelector: []

otel-agent:
  enabled: true
  resources:
    limits:
      cpu: 300m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 372Mi
  image:
    repository: "{{ $.Values.global.image.registry }}/kubeotel"
    pullPolicy: "{{ $.Values.global.image.pullPolicy }}"
    tag: "1.0.3"
  mode: deployment
  clusterRole:
    create: true
    name: "otel-agent"
    rules:
    - apiGroups: [""]
      resources: ["nodes", "nodes/stats", "nodes/proxy", "events"]
      verbs: ["get", "watch", "list"]
    - apiGroups: ["events.k8s.io"]
      resources: ["events"]
      verbs: ["watch", "list"]
    clusterRoleBinding:
      name: "otel-agent"
  serviceAccount:
    create: true
    name: "otel-agent"    
  config:
    receivers:
      kubesensek8sevents:
        cluster: k8s-d-rMZzQiOarI
        entities:
          - name: events
            mode: watch
    exporters:
      otlp:
        endpoint: "kubesense-kubeotel:4317"
        tls:
          insecure: true
    service:
      pipelines:
        logs:
          receivers: [kubesensek8sevents]
          processors: [batch]
          exporters: [otlp]

kube-state-metrics:
  enabled: true
  image:
    registry: "{{ $.Values.global.image.registry }}"
    repository: kube-state-metrics
    tag: "v2.10.1"
    pullPolicy: "{{ $.Values.global.image.pullPolicy }}"

  imagePullSecrets:
  - "{{ $.Values.global.image.pullSecrets }}"
  nodeSelector:
  nameOverride: kube-state-metrics
  customLabels:
    app.kubesense.com/owner: kubesense
  service:
    port: 8080
    annotations:
      prometheus.io/port: "8080"
  collectors:
    # - certificatesigningrequests
    - configmaps
    - cronjobs
    - daemonsets
    - deployments
    # - endpoints
    - horizontalpodautoscalers
    # - ingresses
    - jobs
    # - leases
    # - limitranges
    # - mutatingwebhookconfigurations
    # - namespaces
    # - networkpolicies
    - nodes
    - persistentvolumeclaims
    - persistentvolumes
    # - poddisruptionbudgets
    - pods
    - replicasets
    - replicationcontrollers
    # - resourcequotas
    # - secrets
    # - services
    - statefulsets
    # - storageclasses
    # - validatingwebhookconfigurations
    # - volumeattachments
